import datetime
import math
from prettytable import PrettyTable

#=========================================================================
# a menu item, followed by the respective cookie mix
menu = {  'Delicious Duo' : {'Sugar' : 3, 'Chocolate' : 3, 'Peanut' : 0 }, 
               'Six Pack' : {'Sugar' : 2, 'Chocolate' : 2, 'Peanut' : 2 }, 
            'Sugar Snack' : {'Sugar' : 6, 'Chocolate' : 0, 'Peanut' : 0 },
         'Burdell Bundle' : {'Sugar' : 5, 'Chocolate' : 5, 'Peanut' : 5 } }

# individual prices for each cookie type
cookiePrices = {'Sugar' : 1.00, 'Chocolate' : 2.00, 'Peanut' : 3.00}

# current cookie inventory for each cookie type
cookieInv    = {'Sugar' : 40,   'Chocolate' : 25,   'Peanut' : 13}

# past orders (in reality, would be in a DBMS)
'Legend: SS => Sugar Snack; SP => Six Pack; DD => Delicious Duo; BB => Burdell Bundle'
'Content:   tranCode, orderQty, orderDateTime, tranCost'

orderRec = { 'SS1' : {5, '2022-02-26 13:52', 33.00 }, 
             'BB1' : {2, '2022-02-26 15:13', 66.00 },
             'DD1' : {3, '2022-02-26 15:32', 29.70 },
             'SP1' : {1, '2022-02-26 15:43', 13.20 },
             'DD2' : {6, '2022-02-26 16:03', 59.40 },
             'BB2' : {3, '2022-02-26 16:12', 99.00 },
             'DD3' : {4, '2022-02-26 16:14', 39.60 }         
           }

# =============================================================
def displayMenu(menu):
    tbl = PrettyTable()
    tbl.field_names = ['Menu Items', 'Sugar Cookie', 'Chocolate Cookie', 'Peanut Cookie', 'Menu Item Price']
    tbl.add_row(['Burdell Bundle', 5, 5, 5, getMenuPrice('Burdell Bundle')])
    tbl.add_row(['Delicious Duo', 3, 3, 0, getMenuPrice('Delicious Duo')])
    tbl.add_row(['Six Pack', 2, 2, 2, getMenuPrice('Six Pack')])
    tbl.add_row(['Sugar Snack', 6, 0, 0, getMenuPrice('Sugar Snack')])
    menu = tbl
    print(menu)

    
def getMenuPrice(chosenMenuItem):
    menuItemPrice = 0
    for k1,price in menu.items():
        if chosenMenuItem == k1:
            for k2,v2 in price.items():
                if k2 in cookiePrices:
                    price = v2 * cookiePrices[k2]
                    menuItemPrice += price
    return menuItemPrice
                
maxCanOfferSnack = math.floor(cookieInv['Sugar'] / 6)

maxCanOfferPack = math.floor(min(cookieInv['Sugar']/2,cookieInv['Chocolate']/2, cookieInv['Peanut']/2 ))

maxCanOfferDuo = math.floor(min(cookieInv['Sugar']/3, cookieInv['Chocolate']/3))

maxCanOfferBundle = math.floor(min(cookieInv['Sugar']/5,cookieInv['Chocolate']/5, cookieInv['Peanut']/5 ))

def maxUnitsCanOrder(menu, chosenMenuItem, cookieInv):
    if chosenMenuItem == 'Sugar Snack':
        return (maxCanOfferSnack)
    elif chosenMenuItem == 'Burdell Bundle':
        return (maxCanOfferBundle)
    elif chosenMenuItem == 'Six Pack':
        return (maxCanOfferPack)
    elif chosenMenuItem == 'Delicious Duo':
        return (maxCanOfferDuo)

def decreaseInventory(menu, chosenMenuItem, cookieInv, orderQty):
    if chosenMenuItem == 'Sugar Snack':
        cookieInv['Sugar'] -= (orderQty*6)
    elif chosenMenuItem == 'Six Pack':
        cookieInv['Sugar'] -= (orderQty*2)
        cookieInv['Chocolate'] -= (orderQty*2)
        cookieInv['Peanut'] -= (orderQty*2)
    elif chosenMenuItem == 'Burdell Bundle': 
        cookieInv['Sugar'] -= (orderQty*5)
        cookieInv['Chocolate'] -= (orderQty*5)
        cookieInv['Peanut'] -= (orderQty*5) 
    elif chosenMenuItem == 'Delicious Duo':
        cookieInv['Sugar'] -= (orderQty*3)
        cookieInv['Chocolate'] -= (orderQty*3) 
   
def calcTranCost(chosenMenuItem, orderQty):
    tranCost = (round(getMenuPrice(chosenMenuItem) * orderQty * 1.1, 2))
    return tranCost

def recordOrder(orderRec, chosenMenuItem, orderQty, tranCost):
    itemInitials = ''
    for k1,v1 in menu.items():
        if k1 == chosenMenuItem:
            for char in k1:
                if char == char.upper() and char != ' ':
                    itemInitials = itemInitials + char
    num = 1
    newOrder = itemInitials + str(num)
    for k2 in orderRec:
        if newOrder == k2:
            num += 1
            newOrder = itemInitials + str(num)

    orderRec[newOrder] = {orderQty, datetime.datetime.now().strftime('%Y-%m-%d %H:%M'), tranCost}


print ('Welcome to Hot Byte Cookies')
print ('Here\'s our yummy menu!')
displayMenu(menu)
print('>>From our menu, please enter the Menu Item you want to buy:')
chosenMenuItem = str(input())
print('>>Please enter the number of ' +chosenMenuItem + ' boxes you want to buy:')
orderQty = int(input())
maxUnits = maxUnitsCanOrder( menu, chosenMenuItem, cookieInv)
if orderQty <= maxUnits:
    print ('Yes we can do that! Hot cookies coming up. Hang tight!')
    print ('The total cost for your', orderQty, chosenMenuItem, 'boxes is $', (round(getMenuPrice(chosenMenuItem) * orderQty * 1.1, 2)), 'Time to pay up!')
    print ('Thanks for your business. See you next time!')
    ticker = 'on'
if orderQty > maxUnits and maxUnits !=0:
    print('You have chosen to order', orderQty,  'boxes of menu item:', chosenMenuItem)
    print ('So sorry!! We\'ve had a run on cookies and can only cover', maxUnitsCanOrder(menu, chosenMenuItem, cookieInv), 'boxes of', chosenMenuItem)
    print ('Would you like to proceed with this quantity?')
    answer = input('Yes or No: ')
    if answer == 'Yes':
        orderQty = maxUnits
        print ('Super! Cookies coming up. I have to say, you are looking terrific today!')
        print ('The total cost for your', maxUnitsCanOrder(menu, chosenMenuItem, cookieInv), chosenMenuItem, 'boxes is $', (round(getMenuPrice(chosenMenuItem) * maxUnitsCanOrder(menu, chosenMenuItem, cookieInv) * 1.1, 2)), 'Time to pay up!')
        print ('Thanks for your business. See you next time!')
        ticker = 'on'
    elif answer == 'No':
        print ('Well don\'t be a stranger! We\'ll expect to see you back sometime soon!')
        ticker = 'off'
if maxUnits == 0:
    print ('So sorry!! We\'ve had a run on cookies and there are no Six Pack left. See you tomorrow!')
    ticker = 'off'
    
if ticker == 'on':
    tranCost = calcTranCost(chosenMenuItem, orderQty)
    recordOrder(orderRec, chosenMenuItem, orderQty, tranCost)
    decreaseInventory(menu, chosenMenuItem, cookieInv, orderQty)

    print ('Updated orderRec ==>', orderRec)    
    print ('Ending cookie inventory ==>', cookieInv)
    
